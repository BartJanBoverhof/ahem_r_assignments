distributions))
times_start <- c(rep(data_survival$start_time_censor, data_survival$n_censors), rep(data_survival$start_time_event, data_survival$n_events))
times_end   <- c(rep(data_survival$end_time_censor, data_survival$n_censors),   rep(data_survival$end_time_event,   data_survival$n_events))
times_start <- c(times_start, rep(data_times$n_last_time_point, data_times$n_patients_at_risk))
times_end   <- c(times_end, rep(10000, data_times$n_patients_at_risk))
for (d in distributions) {
model <- survreg(Surv(times_start, times_end, type = "interval2") ~ 1, dist = d)
n_AIC <- -2 * summary(model)$loglik[1] + 2 * ifelse(d == "exponential", 1 , 2)
n_intercept <- summary(model)$table[1]
n_log_scale <- ifelse(d != "exponential", summary(model)$table[2], NA)
m_cholesky  <- t(chol(summary(model)$var))
l_results[[d]] <- list(model     = model,
AIC       = n_AIC,
intercept = n_intercept,
log_scale = n_log_scale,
cholesky  = m_cholesky)
m_model_parameters["AIC",        which(d == distributions)] <- n_AIC
m_model_parameters["intercept",  which(d == distributions)] <- n_intercept
m_model_parameters["log(scale)", which(d == distributions)] <- n_log_scale
m_model_parameters <- round(m_model_parameters, 4)
}
l_results$summary <- m_model_parameters
return(l_results)
}
l_results_all <- list()
for (df in names(l_data_survival)) {
l_results_all[[df]] <- get_survival_parameters(data_survival = l_data_survival[[df]], data_times = l_times[[df]])
}
saveRDS(l_results_all, file = "output/l_results_all.rds")
library(openxlsx)
wb <- createWorkbook("AHEM student")
addWorksheet(wb, "PFS caba", gridLines = FALSE, tabColour = "coral")
addWorksheet(wb, "PFS mito", gridLines = FALSE, tabColour = "coral3")
addWorksheet(wb, "OS caba",  gridLines = FALSE, tabColour = "skyblue")
addWorksheet(wb, "OS mito",  gridLines = FALSE, tabColour = "skyblue4")
for (i in v_names_data) {
print(i)
print(l_results_all[[i]]$summary)
writeData(wb, sheet = i, x = l_results_all[[i]]$summary, rowNames = TRUE)
}
saveWorkbook(wb, "output/output_parametric_survival_model_parameters.xlsx", overwrite = TRUE)
# Ignore this code for now, used for the solutions
# source("solution_estimate survival prob.R")
# Extract the results for OS Mito
l_OS_mito <- l_results_all$`OS mito`
t_weeks <- 15           # number of weeks
t <- (t_weeks/ 52) * 12 # time in months
cat(t_weeks, "weeks is the same as", round(t, 3), "months", "\n")
t_weeks <- 15           # number of weeks
t <- (t_weeks/ 52) * 12 # time in months
cat(t_weeks, "weeks is the same as", round(t, 3), "months", "\n")
### Exponential ###
# Function to calculate survival probability using the Exponential distribution
exponential_survival <- function(t, intercept) {
# t: time point in months at which the survival probability is estimated
# intercept: estimate of the intercept for the survival curve (from model fit)
# Calculate lambda (scale parameter) based on the intercept value.
# Here, lambda is the exponential of the negative of the intercept.
lambda <- exp(-intercept)  # Scale parameter for the Exponential distribution
# Calculate the survival probability at time t using the Exponential survival function.
S_t <- exp(-t * lambda)
return(S_t)   # Return the calculated survival probability at time t
}
# Calculation for exponential distribution
intercept_exp   <- l_OS_mito$exponential$intercept
p_survival_exp  <- exponential_survival(t, intercept_exp)
cat("Survival probability (Exponential) at: ", round(52/t), "weeks :", p_survival_exp, "\n")
# YOUR TURN ##
### weibull ###
#p_survival_weibull
### lognormal ###
#p_survival_lognormal
### Exponential ###
#p_survival_loglogistic
## Summary ##
# Combine and display results
#v_survival_props <- round(c(p_survival_exp, p_survival_weibull, p_survival_lognormal, p_survival_loglogistic), 4)
#names(v_survival_props) <- c("exponential", "weibull", "lognormal", "loglogistic")
#round(v_survival_props, 3) * 100
m_cholesky_exponential <- matrix(NA, nrow = 1, ncol = 4,
dimnames = list("exponential",
rev(v_names_data)))
# Create a list for the cholesky matrix
l_cholesky_weibull <- l_cholesky_lognormal <- l_cholesky_loglogistic <- list()
# Create table for the Cholesky matrices
for (i in v_names_data){
m_cholesky_exponential[, i] <- (l_results_all[[i]]$exponential$cholesky)
l_cholesky_weibull[[i]]     <- as.matrix((l_results_all[[i]]$weibull$cholesky))
l_cholesky_lognormal[[i]]   <- (l_results_all[[i]]$lognormal$cholesky)
l_cholesky_loglogistic[[i]] <- (l_results_all[[i]]$loglogistic$cholesky)
}
# Load necessary library
library(openxlsx)
# Initialize workbook
wb_2 <- createWorkbook("AHEM student")
# Add worksheets with colors
addWorksheet(wb_2, "exponential", gridLines = FALSE, tabColour = "skyblue4")
addWorksheet(wb_2, "weibull",     gridLines = FALSE, tabColour = "coral3")
addWorksheet(wb_2, "lognormal",   gridLines = FALSE, tabColour = "skyblue")
addWorksheet(wb_2, "loglogistic", gridLines = FALSE, tabColour = "coral")
# Write m_cholesky_exponential directly
writeData(wb_2, sheet = "exponential", x = m_cholesky_exponential, rowNames = TRUE)
# Define the fixed order
fixed_order <- c("PFS caba", "PFS mito", "OS caba", "OS mito")
# Write l_cholesky_weibull in the fixed order
startRow <- 1
for (name in fixed_order) {
if (name %in% names(l_cholesky_weibull)) {
writeData(wb_2, sheet = "weibull", x = paste("Model:", name), startRow = startRow, startCol = 1)
writeData(wb_2, sheet = "weibull", x = l_cholesky_weibull[[name]], startRow = startRow + 1, rowNames = TRUE)
startRow <- startRow + nrow(l_cholesky_weibull[[name]]) + 3
}
}
# Write l_cholesky_lognormal in the fixed order
startRow <- 1
for (name in fixed_order) {
if (name %in% names(l_cholesky_lognormal)) {
writeData(wb_2, sheet = "lognormal", x = paste("Model:", name), startRow = startRow, startCol = 1)
writeData(wb_2, sheet = "lognormal", x = l_cholesky_lognormal[[name]], startRow = startRow + 1, rowNames = TRUE)
startRow <- startRow + nrow(l_cholesky_lognormal[[name]]) + 3
}
}
# Write l_cholesky_loglogistic in the fixed order
startRow <- 1
for (name in fixed_order) {
if (name %in% names(l_cholesky_loglogistic)) {
writeData(wb_2, sheet = "loglogistic", x = paste("Model:", name), startRow = startRow, startCol = 1)
writeData(wb_2, sheet = "loglogistic", x = l_cholesky_loglogistic[[name]], startRow = startRow + 1, rowNames = TRUE)
startRow <- startRow + nrow(l_cholesky_loglogistic[[name]]) + 3
}
}
# Save the workbook
saveWorkbook(wb_2, "output/output_cholensky.xlsx", overwrite = TRUE)
# https://www.math.arizona.edu/~rsims/ma464/standardnormaltable.pdf
# Extract the results for OS Mito
l_OS_mito <- l_results_all$`OS mito`
t_weeks <- 15           # number of weeks
t <- (t_weeks/ 52) * 12 # time in months
cat(t_weeks, "weeks is the same as", round(t, 3), "months", "\n")
### Exponential ###
# Function to calculate survival probability using the Exponential distribution
exponential_survival <- function(t, intercept) {
# t: time point in months at which the survival probability is estimated
# intercept: estimate of the intercept for the survival curve (from model fit)
# Calculate lambda (scale parameter) based on the intercept value.
# Here, lambda is the exponential of the negative of the intercept.
lambda <- exp(-intercept)  # Scale parameter for the Exponential distribution
# Calculate the survival probability at time t using the Exponential survival function.
S_t <- exp(-t * lambda)
return(S_t)   # Return the calculated survival probability at time t
}
# Calculation for exponential distribution
intercept_exp <- l_OS_mito$exponential$intercept
p_survival_exp <- exponential_survival(t, intercept_exp)
cat("Survival probability (Exponential) at: ", round(52/t), "weeks :", p_survival_exp, "\n")
### Weibull ###
# Function to calculate survival probability using the Weibull distribution
weibull_survival <- function(t, intercept, scale) {
# t: time point at which the survival probability is estimated
# intercept: estimate of the intercept for the survival curve (from model fit)
# scale: scale parameter for the Weibull distribution, typically derived from the fitted model.
#        Note: scale = exp(logscale), where logscale is the log-transformed scale.
# Calculate the lambda (scale parameter) using the intercept and scale value.
lambda <- exp(-intercept / scale)
# Calculate the gamma (shape parameter) based on the scale.
gamma <- 1 / scale
# Calculate the survival probability at time t using the Weibull survival function.
S_t <- exp(-lambda * t ^ gamma)
return(S_t)  # Return the calculated survival probability at time t
}
intercept_weibull <- l_OS_mito$weibull$intercept
scale_weibull     <- exp(l_OS_mito$weibull$log_scale)
p_survival_weibull <- weibull_survival(t, intercept = intercept_weibull, scale = scale_weibull)
cat("Survival probability (Weibull) at time", t, "weeks :", p_survival_weibull, "\n")
# Weibull
### Lognormal ###
# Function to calculate survival probability using the Log-Normal distribution
lognormal_survival <- function(t, intercept, scale) {
# t: time point at which the survival probability is estimated
# intercept: estimate of the intercept for the log-normal curve (related to mu)
# scale: scale parameter for the log-normal curve (related to sigma)
# Calculate mu (mean) and sigma (standard deviation) for the normal distribution
mu    <- intercept  # Intercept corresponds to the mean (mu) of the underlying normal distribution
sigma <- scale   # Scale corresponds to the standard deviation (sigma)
# Calculate the survival probability at time t using the log-normal survival function
# Formula: S(t) = 1 - Phi( (ln(t) - mu) / sigma )
survival_prob <- 1 - pnorm((log(t) - mu) / sigma)
# Return the survival probability at time t
return(survival_prob)
}
mu <- intercept_lognormal<- l_OS_mito$lognormal$intercept
sigma <- scale_lognormal    <- exp(l_OS_mito$lognormal$log_scale)
p_survival_lognormal <- lognormal_survival(t, intercept = intercept_lognormal, scale = scale_lognormal)
cat("Survival probability (Lognormal) at time", t, "weeks :", p_survival_lognormal, "\n")
### Loglogistic ###
# Function to calculate survival probability using the Log-Logistic distribution
loglogistic_survival <- function(t, intercept, scale) {
# t:         time point at which the survival probability is estimated
# intercept: estimate of the intercept for the survival curve (from model fit)
# scale:     scale parameter for the Log-Logistic distribution (typically derived from the fitted model)
# Calculate lambda (scale parameter) using the intercept and scale
lambda <- exp(-intercept / scale)
# Calculate gamma (shape parameter) as the inverse of the scale
gamma <- 1 / scale
# Calculate the survival probability at time t using the Log-Logistic survival function
# The formula is: S(t) = 1 / (1 + lambda * t^gamma)
S_t <- 1 / (1 + lambda * t^gamma)
# Return the survival probability at time t
return(S_t)
}
#  for Log-Logistic distribution
intercept_loglogistic <- l_OS_mito$loglogistic$intercept
scale_loglogistic     <- exp(l_OS_mito$loglogistic$log_scale)
# Calculate survival probability at time_point using Log-Logistic distribution
p_survival_loglogistic <- loglogistic_survival(t, intercept = intercept_loglogistic, scale = scale_loglogistic)
cat("Survival probability (Loglogistic) at time", t, "weeks :", p_survival_loglogistic, "\n")
## Summary ##
# Combine and display results
v_survival_props <- round(c(p_survival_exp, p_survival_weibull, p_survival_lognormal, p_survival_loglogistic), 4)
names(v_survival_props) <- c("exponential", "weibull", "lognormal", "loglogistic")
round(v_survival_props, 3) * 100
# Define the fixed order
fixed_order <- c("PFS caba", "PFS mito", "OS caba", "OS mito")
m_cholesky_exponential
order(m_cholesky_exponential, fixed_order)
m_cholesky_exponential(order(m_cholesky_exponential, fixed_order))
m_cholesky_exponential(order( fixed_order))
m_cholesky_exponential(order( fixed_order))
m_cholesky_exponential[order(m_cholesky_exponential, fixed_order)]
m_cholesky_exponential
m_cholesky_exponential[match(fixed_order, rownames(m_cholesky_exponential)), ]
m_cholesky_exponential[, match(fixed_order, colnames(m_cholesky_exponential)), ]
# Example matrix
my_matrix <- matrix(1:9, nrow = 3, dimnames = list(c("A", "B", "C"), NULL))
# Example vector
my_vector <- c("C", "A", "B")
my_matrix
my_matrix
# Example vector
my_vector <- c("C", "A", "B")
# Reorder the matrix rows to match the order in the vector
ordered_matrix <- my_matrix[match(my_vector, rownames(my_matrix)), ]
# Print the result
print(ordered_matrix)
# Example matrix
my_matrix <- matrix(1:9, nrow = 3, dimnames = list(c("A", "B", "C"), NULL))
# Example vector
my_vector <- c("C", "A", "B")
# Reorder the matrix rows to match the order in the vector
ordered_matrix <- my_matrix[, match(my_vector, colnames(my_matrix))]
# Print the result
print(ordered_matrix)
# Reorder the matrix rows to match the order in the vector
ordered_matrix <- my_matrix[, match(my_vector, colnames(my_matrix)) ]
ordered_matrix
m_cholesky_exponential <- matrix(NA, nrow = 1, ncol = 4,
dimnames = list("exponential",
rev(v_names_data)))
# Create a list for the cholesky matrix
l_cholesky_weibull <- l_cholesky_lognormal <- l_cholesky_loglogistic <- list()
# Create table for the Cholesky matrices
for (i in v_names_data){
m_cholesky_exponential[, i] <- (l_results_all[[i]]$exponential$cholesky)
l_cholesky_weibull[[i]]     <- as.matrix((l_results_all[[i]]$weibull$cholesky))
l_cholesky_lognormal[[i]]   <- (l_results_all[[i]]$lognormal$cholesky)
l_cholesky_loglogistic[[i]] <- (l_results_all[[i]]$loglogistic$cholesky)
}
# Load necessary library
library(openxlsx)
# Initialize workbook
wb_2 <- createWorkbook("AHEM student")
# Add worksheets with colors
addWorksheet(wb_2, "exponential", gridLines = FALSE, tabColour = "skyblue4")
addWorksheet(wb_2, "weibull",     gridLines = FALSE, tabColour = "coral3")
addWorksheet(wb_2, "lognormal",   gridLines = FALSE, tabColour = "skyblue")
addWorksheet(wb_2, "loglogistic", gridLines = FALSE, tabColour = "coral")
# Define the fixed order
fixed_order <- c("PFS caba", "PFS mito", "OS caba", "OS mito")
m_cholesky_exponential
m_cholesky_exponential[, match(m_cholesky_exponential, colnames(fixed_order)]
m_cholesky_exponential[, match(fixed_order, colnames(m_cholesky_exponential)]
m_cholesky_exponential[, match(fixed_order, colnames(m_cholesky_exponential))]
# Write m_cholesky_exponential directly
writeData(wb_2, sheet = "exponential", x =  m_cholesky_exponential[, match(fixed_order, colnames(m_cholesky_exponential))], rowNames = TRUE)
m_cholesky_exponential <- matrix(NA, nrow = 1, ncol = 4,
dimnames = list("exponential",
rev(v_names_data)))
# Create a list for the cholesky matrix
l_cholesky_weibull <- l_cholesky_lognormal <- l_cholesky_loglogistic <- list()
# Create table for the Cholesky matrices
for (i in v_names_data){
m_cholesky_exponential[, i] <- (l_results_all[[i]]$exponential$cholesky)
l_cholesky_weibull[[i]]     <- as.matrix((l_results_all[[i]]$weibull$cholesky))
l_cholesky_lognormal[[i]]   <- (l_results_all[[i]]$lognormal$cholesky)
l_cholesky_loglogistic[[i]] <- (l_results_all[[i]]$loglogistic$cholesky)
}
# Load necessary library
library(openxlsx)
# Initialize workbook
wb_2 <- createWorkbook("AHEM student")
# Add worksheets with colors
addWorksheet(wb_2, "exponential", gridLines = FALSE, tabColour = "skyblue4")
addWorksheet(wb_2, "weibull",     gridLines = FALSE, tabColour = "coral3")
addWorksheet(wb_2, "lognormal",   gridLines = FALSE, tabColour = "skyblue")
addWorksheet(wb_2, "loglogistic", gridLines = FALSE, tabColour = "coral")
# Define the fixed order
fixed_order <- c("PFS caba", "PFS mito", "OS caba", "OS mito")
# Write m_cholesky_exponential directly
writeData(wb_2, sheet = "exponential", x =  m_cholesky_exponential[, match(fixed_order, colnames(m_cholesky_exponential))], rowNames = TRUE)
# Write l_cholesky_weibull in the fixed order
startRow <- 1
for (name in fixed_order) {
if (name %in% names(l_cholesky_weibull)) {
writeData(wb_2, sheet = "weibull", x = paste("Model:", name), startRow = startRow, startCol = 1)
writeData(wb_2, sheet = "weibull", x = l_cholesky_weibull[[name]], startRow = startRow + 1, rowNames = TRUE)
startRow <- startRow + nrow(l_cholesky_weibull[[name]]) + 3
}
}
# Write l_cholesky_lognormal in the fixed order
startRow <- 1
for (name in fixed_order) {
if (name %in% names(l_cholesky_lognormal)) {
writeData(wb_2, sheet = "lognormal", x = paste("Model:", name), startRow = startRow, startCol = 1)
writeData(wb_2, sheet = "lognormal", x = l_cholesky_lognormal[[name]], startRow = startRow + 1, rowNames = TRUE)
startRow <- startRow + nrow(l_cholesky_lognormal[[name]]) + 3
}
}
# Write l_cholesky_loglogistic in the fixed order
startRow <- 1
for (name in fixed_order) {
if (name %in% names(l_cholesky_loglogistic)) {
writeData(wb_2, sheet = "loglogistic", x = paste("Model:", name), startRow = startRow, startCol = 1)
writeData(wb_2, sheet = "loglogistic", x = l_cholesky_loglogistic[[name]], startRow = startRow + 1, rowNames = TRUE)
startRow <- startRow + nrow(l_cholesky_loglogistic[[name]]) + 3
}
}
# Save the workbook
saveWorkbook(wb_2, "output/output_cholensky.xlsx", overwrite = TRUE)
m_cholesky_exponential[, match(fixed_order, colnames(m_cholesky_exponential))]
m_cholesky_exponential <- matrix(NA, nrow = 1, ncol = 4,
dimnames = list("exponential",
rev(v_names_data)))
# Create a list for the cholesky matrix
l_cholesky_weibull <- l_cholesky_lognormal <- l_cholesky_loglogistic <- list()
# Create table for the Cholesky matrices
for (i in v_names_data){
m_cholesky_exponential[, i] <- (l_results_all[[i]]$exponential$cholesky)
l_cholesky_weibull[[i]]     <- as.matrix((l_results_all[[i]]$weibull$cholesky))
l_cholesky_lognormal[[i]]   <- (l_results_all[[i]]$lognormal$cholesky)
l_cholesky_loglogistic[[i]] <- (l_results_all[[i]]$loglogistic$cholesky)
}
# Load necessary library
library(openxlsx)
# Initialize workbook
wb_2 <- createWorkbook("AHEM student")
# Add worksheets with colors
addWorksheet(wb_2, "exponential", gridLines = FALSE, tabColour = "skyblue4")
addWorksheet(wb_2, "weibull",     gridLines = FALSE, tabColour = "coral3")
addWorksheet(wb_2, "lognormal",   gridLines = FALSE, tabColour = "skyblue")
addWorksheet(wb_2, "loglogistic", gridLines = FALSE, tabColour = "coral")
# Define the fixed order
fixed_order <- c("PFS caba", "PFS mito", "OS caba", "OS mito")
# Write m_cholesky_exponential directly
writeData(wb_2, sheet = "exponential", x =  m_cholesky_exponential[, match(fixed_order, colnames(m_cholesky_exponential))], rowNames = TRUE)
# Write l_cholesky_weibull in the fixed order
startRow <- 1
for (name in fixed_order) {
if (name %in% names(l_cholesky_weibull)) {
writeData(wb_2, sheet = "weibull", x = paste("Model:", name), startRow = startRow, startCol = 1)
writeData(wb_2, sheet = "weibull", x = l_cholesky_weibull[[name]], startRow = startRow + 1, rowNames = TRUE)
startRow <- startRow + nrow(l_cholesky_weibull[[name]]) + 3
}
}
# Write l_cholesky_lognormal in the fixed order
startRow <- 1
for (name in fixed_order) {
if (name %in% names(l_cholesky_lognormal)) {
writeData(wb_2, sheet = "lognormal", x = paste("Model:", name), startRow = startRow, startCol = 1)
writeData(wb_2, sheet = "lognormal", x = l_cholesky_lognormal[[name]], startRow = startRow + 1, rowNames = TRUE)
startRow <- startRow + nrow(l_cholesky_lognormal[[name]]) + 3
}
}
# Write l_cholesky_loglogistic in the fixed order
startRow <- 1
for (name in fixed_order) {
if (name %in% names(l_cholesky_loglogistic)) {
writeData(wb_2, sheet = "loglogistic", x = paste("Model:", name), startRow = startRow, startCol = 1)
writeData(wb_2, sheet = "loglogistic", x = l_cholesky_loglogistic[[name]], startRow = startRow + 1, rowNames = TRUE)
startRow <- startRow + nrow(l_cholesky_loglogistic[[name]]) + 3
}
}
# Save the workbook
saveWorkbook(wb_2, "output/output_cholensky.xlsx", overwrite = TRUE)
m_cholesky_exponential[, match(fixed_order, colnames(m_cholesky_exponential))]
# Write m_cholesky_exponential directly
writeData(wb_2, sheet = "exponential", x =  m_cholesky_exponential, rowNames = TRUE)
m_cholesky_exponential_order <- m_cholesky_exponential[, match(fixed_order, colnames(m_cholesky_exponential))]
m_cholesky_exponential_order
m_cholesky_exponential <- matrix(NA, nrow = 1, ncol = 4,
dimnames = list("exponential",
rev(v_names_data)))
# Create a list for the cholesky matrix
l_cholesky_weibull <- l_cholesky_lognormal <- l_cholesky_loglogistic <- list()
# Create table for the Cholesky matrices
for (i in v_names_data){
m_cholesky_exponential[, i] <- (l_results_all[[i]]$exponential$cholesky)
l_cholesky_weibull[[i]]     <- as.matrix((l_results_all[[i]]$weibull$cholesky))
l_cholesky_lognormal[[i]]   <- (l_results_all[[i]]$lognormal$cholesky)
l_cholesky_loglogistic[[i]] <- (l_results_all[[i]]$loglogistic$cholesky)
}
# Load necessary library
library(openxlsx)
# Initialize workbook
wb_2 <- createWorkbook("AHEM student")
# Add worksheets with colors
addWorksheet(wb_2, "exponential", gridLines = FALSE, tabColour = "skyblue4")
addWorksheet(wb_2, "weibull",     gridLines = FALSE, tabColour = "coral3")
addWorksheet(wb_2, "lognormal",   gridLines = FALSE, tabColour = "skyblue")
addWorksheet(wb_2, "loglogistic", gridLines = FALSE, tabColour = "coral")
# Define the fixed order
fixed_order <- c("PFS caba", "PFS mito", "OS caba", "OS mito")
m_cholesky_exponential_order <- m_cholesky_exponential[, match(fixed_order, colnames(m_cholesky_exponential))]
# Write m_cholesky_exponential directly
writeData(wb_2, sheet = "exponential", x =  m_cholesky_exponential_order, rowNames = TRUE)
# Write l_cholesky_weibull in the fixed order
startRow <- 1
for (name in fixed_order) {
if (name %in% names(l_cholesky_weibull)) {
writeData(wb_2, sheet = "weibull", x = paste("Model:", name), startRow = startRow, startCol = 1)
writeData(wb_2, sheet = "weibull", x = l_cholesky_weibull[[name]], startRow = startRow + 1, rowNames = TRUE)
startRow <- startRow + nrow(l_cholesky_weibull[[name]]) + 3
}
}
# Write l_cholesky_lognormal in the fixed order
startRow <- 1
for (name in fixed_order) {
if (name %in% names(l_cholesky_lognormal)) {
writeData(wb_2, sheet = "lognormal", x = paste("Model:", name), startRow = startRow, startCol = 1)
writeData(wb_2, sheet = "lognormal", x = l_cholesky_lognormal[[name]], startRow = startRow + 1, rowNames = TRUE)
startRow <- startRow + nrow(l_cholesky_lognormal[[name]]) + 3
}
}
# Write l_cholesky_loglogistic in the fixed order
startRow <- 1
for (name in fixed_order) {
if (name %in% names(l_cholesky_loglogistic)) {
writeData(wb_2, sheet = "loglogistic", x = paste("Model:", name), startRow = startRow, startCol = 1)
writeData(wb_2, sheet = "loglogistic", x = l_cholesky_loglogistic[[name]], startRow = startRow + 1, rowNames = TRUE)
startRow <- startRow + nrow(l_cholesky_loglogistic[[name]]) + 3
}
}
# Save the workbook
saveWorkbook(wb_2, "output/output_cholensky.xlsx", overwrite = TRUE)
m_cholesky_exponential_order
rownames(m_cholesky_exponential_order)
rownames(m_cholesky_exponential)
---
title: "PC Lab for Advanced Health Economic Modeling"
m_cholesky_exponential <- matrix(NA, nrow = 1, ncol = 4,
dimnames = list("exponential",
rev(v_names_data)))
# Create a list for the cholesky matrix
l_cholesky_weibull <- l_cholesky_lognormal <- l_cholesky_loglogistic <- list()
# Create table for the Cholesky matrices
for (i in v_names_data){
m_cholesky_exponential[, i] <- (l_results_all[[i]]$exponential$cholesky)
l_cholesky_weibull[[i]]     <- as.matrix((l_results_all[[i]]$weibull$cholesky))
l_cholesky_lognormal[[i]]   <- (l_results_all[[i]]$lognormal$cholesky)
l_cholesky_loglogistic[[i]] <- (l_results_all[[i]]$loglogistic$cholesky)
}
# Load necessary library
library(openxlsx)
# Initialize workbook
wb_2 <- createWorkbook("AHEM student")
# Add worksheets with colors
addWorksheet(wb_2, "exponential", gridLines = FALSE, tabColour = "skyblue4")
addWorksheet(wb_2, "weibull",     gridLines = FALSE, tabColour = "coral3")
addWorksheet(wb_2, "lognormal",   gridLines = FALSE, tabColour = "skyblue")
addWorksheet(wb_2, "loglogistic", gridLines = FALSE, tabColour = "coral")
# Define the fixed order
fixed_order <- c("PFS caba", "PFS mito", "OS caba", "OS mito")
# Write m_cholesky_exponential directly
writeData(wb_2, sheet = "exponential", x =  m_cholesky_exponential, rowNames = TRUE)
# Write l_cholesky_weibull in the fixed order
startRow <- 1
for (name in fixed_order) {
if (name %in% names(l_cholesky_weibull)) {
writeData(wb_2, sheet = "weibull", x = paste("Model:", name), startRow = startRow, startCol = 1)
writeData(wb_2, sheet = "weibull", x = l_cholesky_weibull[[name]], startRow = startRow + 1, rowNames = TRUE)
startRow <- startRow + nrow(l_cholesky_weibull[[name]]) + 3
}
}
# Write l_cholesky_lognormal in the fixed order
startRow <- 1
for (name in fixed_order) {
if (name %in% names(l_cholesky_lognormal)) {
writeData(wb_2, sheet = "lognormal", x = paste("Model:", name), startRow = startRow, startCol = 1)
writeData(wb_2, sheet = "lognormal", x = l_cholesky_lognormal[[name]], startRow = startRow + 1, rowNames = TRUE)
startRow <- startRow + nrow(l_cholesky_lognormal[[name]]) + 3
}
}
# Write l_cholesky_loglogistic in the fixed order
startRow <- 1
for (name in fixed_order) {
if (name %in% names(l_cholesky_loglogistic)) {
writeData(wb_2, sheet = "loglogistic", x = paste("Model:", name), startRow = startRow, startCol = 1)
writeData(wb_2, sheet = "loglogistic", x = l_cholesky_loglogistic[[name]], startRow = startRow + 1, rowNames = TRUE)
startRow <- startRow + nrow(l_cholesky_loglogistic[[name]]) + 3
}
}
# Save the workbook
saveWorkbook(wb_2, "output/output_cholensky.xlsx", overwrite = TRUE)
