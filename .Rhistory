# Calculate lambda (scale parameter) based on the intercept value.
# Here, lambda is the exponential of the negative of the intercept.
lambda <- exp(-intercept)  # Scale parameter for the Exponential distribution
# Calculate the survival probability at time t using the Exponential survival function.
S_t <- exp(-t * lambda)
return(S_t)   # Return the calculated survival probability at time t
}
# Calculation for exponential distribution
intercept_exp      <- l_OS_mito$exponential$intercept
p_survival_exp <- exponential_survival(t, intercept_exp)
cat("Survival probability (Exponential) at: ", round(52/t), "weeks :", p_survival_exp, "\n")
### Weibull ###
# Function to calculate survival probability using the Weibull distribution
weibull_survival <- function(t, intercept, scale) {
# t: time point at which the survival probability is estimated
# intercept: estimate of the intercept for the survival curve (from model fit)
# scale: scale parameter for the Weibull distribution, typically derived from the fitted model.
#        Note: scale = exp(logscale), where logscale is the log-transformed scale.
# Calculate the lambda (scale parameter) using the intercept and scale value.
lambda <- exp(-intercept / scale)
# Calculate the gamma (shape parameter) based on the scale.
gamma <- 1 / scale
# Calculate the survival probability at time t using the Weibull survival function.
S_t <- exp(-lambda * t ^ gamma)
return(S_t)  # Return the calculated survival probability at time t
}
intercept_weibull <- l_OS_mito$weibull$intercept
scale_weibull     <- exp(l_OS_mito$weibull$log_scale)
p_survival_weibull <- weibull_survival(t, intercept = intercept_weibull, scale = scale_weibull)
cat("Survival probability (Weibull) at time", t, "weeks :", p_survival_weibull, "\n")
# Weibull
### Lognormal ###
# Function to calculate survival probability using the Log-Normal distribution
lognormal_survival <- function(t, intercept, scale) {
# t: time point at which the survival probability is estimated
# intercept: estimate of the intercept for the log-normal curve (related to mu)
# scale: scale parameter for the log-normal curve (related to sigma)
# Calculate mu (mean) and sigma (standard deviation) for the normal distribution
mu    <- intercept  # Intercept corresponds to the mean (mu) of the underlying normal distribution
sigma <- scale   # Scale corresponds to the standard deviation (sigma)
# Calculate the survival probability at time t using the log-normal survival function
# Formula: S(t) = 1 - Phi( (ln(t) - mu) / sigma )
survival_prob <- 1 - pnorm((log(t) - mu) / sigma)
# Return the survival probability at time t
return(survival_prob)
}
mu <- intercept_lognormal<- l_OS_mito$lognormal$intercept
sigma <- scale_lognormal    <- exp(l_OS_mito$lognormal$log_scale)
p_survival_lognormal <- lognormal_survival(t, intercept = intercept_lognormal, scale = scale_lognormal)
cat("Survival probability (Lognormal) at time", t, "weeks :", p_survival_lognormal, "\n")
### Loglogistic ###
# Function to calculate survival probability using the Log-Logistic distribution
loglogistic_survival <- function(t, intercept, scale) {
# t:         time point at which the survival probability is estimated
# intercept: estimate of the intercept for the survival curve (from model fit)
# scale:     scale parameter for the Log-Logistic distribution (typically derived from the fitted model)
# Calculate lambda (scale parameter) using the intercept and scale
lambda <- exp(-intercept / scale)
# Calculate gamma (shape parameter) as the inverse of the scale
gamma <- 1 / scale
# Calculate the survival probability at time t using the Log-Logistic survival function
# The formula is: S(t) = 1 / (1 + lambda * t^gamma)
S_t <- 1 / (1 + lambda * t^gamma)
# Return the survival probability at time t
return(S_t)
}
#  for Log-Logistic distribution
intercept_loglogistic <- l_OS_mito$loglogistic$intercept
scale_loglogistic     <- exp(l_OS_mito$loglogistic$log_scale)
# Calculate survival probability at time_point using Log-Logistic distribution
p_survival_loglogistic <- loglogistic_survival(t, intercept = intercept_loglogistic, scale = scale_loglogistic)
cat("Survival probability (Loglogistic) at time", t, "weeks :", p_survival_loglogistic, "\n")
## Summary ##
# Combine and display results
v_survival_props <- round(c(p_survival_exp, p_survival_weibull, p_survival_lognormal, p_survival_loglogistic), 4)
names(v_survival_props) <- c("exponential", "weibull", "lognormal", "loglogistic")
round(v_survival_props, 3) * 100
rm(list = ls(all = TRUE)) # Clear all information in the environment
# Uncomment the following line if you need to install the packages
# install.packages(c("survival", "readxl", "openxlsx"))
library(survival)         # Load the survival package
library(readxl)           # Load the readxl package
library(openxlsx)         # Load the openxlsx package
# Load the data from Excel
# Ensure the Excel file is populated with the necessary information.
df_OS_mito       <- na.omit(read_excel("data/Hoyle_and_Henley_Bahl_OS_Mito.xlsm", sheet = "R data", range = cell_cols("A:F")))
df_times_OS_mito <- na.omit(read_excel("data/Hoyle_and_Henley_Bahl_OS_Mito.xlsm", sheet = "R data", range = cell_cols("G:H")))
data <- df_OS_mito
attach(data) # You can ignore the warning about "masked objects"
v_names_trt  <- c("Cabazitaxel", "Mitoxantrone") # vector with the treatment names
v_names_data <- c("PFS caba","PFS mito", "OS caba", "OS mito") # vector for the different data sets
v_names_dist <- c("exponential", "weibull", "lognormal", "loglogistic") # define the distribution we are evaluating
times_start <- c(rep(start_time_censor, n_censors), rep(start_time_event, n_events))
times_end   <- c(rep(end_time_censor, n_censors),   rep(end_time_event,   n_events))
# Adding times for patients at risk at the last time point
times_start <- c(times_start, rep(df_times_OS_mito$n_last_time_point, df_times_OS_mito$n_patients_at_risk))
times_end   <- c(times_end,   rep(10000, df_times_OS_mito$n_patients_at_risk))
df_times    <- cbind(times_start, times_end)
head(df_times)
model_exp  <- survreg(Surv(times_start, times_end, type = "interval2") ~ 1, dist = "exponential")   # Exponential function
model_wei  <- survreg(Surv(times_start, times_end, type = "interval2") ~ 1, dist = "weibull")       # Weibull function
model_logn <- survreg(Surv(times_start, times_end, type = "interval2") ~ 1, dist = "lognormal")     # Lognormal function
model_logl <- survreg(Surv(times_start, times_end, type = "interval2") ~ 1, dist = "loglogistic")   # Log-logistic function
AIC_exp  <- -2 * summary(model_exp)$loglik[1]  + 2 * 1
AIC_wei  <- -2 * summary(model_wei)$loglik[1]  + 2 * 2
AIC_logn <- -2 * summary(model_logn)$loglik[1] + 2 * 2
AIC_logl <- -2 * summary(model_logl)$loglik[1] + 2 * 2
v_AIC <- c(exponential = AIC_exp,
weibull     = AIC_wei,
lognormal   = AIC_logn,
loglogistic = AIC_logl)
v_AIC[order(-v_AIC)]
intercept_exp  <- summary(model_exp)$table ["(Intercept)", "Value"]
intercept_wei  <- summary(model_wei)$table ["(Intercept)", "Value"]
intercept_logn <- summary(model_logn)$table["(Intercept)", "Value"]
intercept_logl <- summary(model_logl)$table["(Intercept)", "Value"]
log_scale_wei  <- summary(model_wei)$table ["Log(scale)", "Value"]
log_scale_logn <- summary(model_logn)$table["Log(scale)", "Value"]
log_scale_logl <- summary(model_logl)$table["Log(scale)", "Value"]
v_intercept        <- c(intercept_exp, intercept_wei, intercept_logn, intercept_logl)
v_log_scale        <- c(NA,            log_scale_wei, log_scale_logn, log_scale_logl)
names(v_intercept) <- names(v_intercept) <- v_names_dist
m_model_parameters_OS_mito <- matrix(NA, nrow = 3, ncol = length(v_names_dist),
dimnames = list(c("AIC", "intercept", "log(scale)"),
v_names_dist))
m_model_parameters_OS_mito["AIC",  ]       <- v_AIC
m_model_parameters_OS_mito["intercept",  ] <- v_intercept
m_model_parameters_OS_mito["log(scale)", ] <- v_log_scale
m_model_parameters_OS_mito <- round(m_model_parameters_OS_mito, 4)
m_model_parameters_OS_mito
cholesky_exp  <- t(chol(summary(model_exp)$var))
cholesky_wei  <- t(chol(summary(model_wei)$var))
cholesky_logn <- t(chol(summary(model_logn)$var))
cholesky_logl <- t(chol(summary(model_logl)$var))
l_cholesky <- list("exponential"  = cholesky_exp,
"weibull"      = cholesky_wei,
"lognormal"    = cholesky_logn,
"loglogistic"  = cholesky_logl)
l_cholesky
library(readxl)           # Load the readxl package
# Load the data from the Excel files
df_PFS_caba <- na.omit(read_excel("data/Hoyle_and_Henley_PFS_Caba.xlsm",     sheet = "R data", range = cell_cols("A:F")))
df_PFS_mito <- na.omit(read_excel("data/Hoyle_and_Henley_PFS_Mito.xlsm",     sheet = "R data", range = cell_cols("A:F")))
df_OS_caba  <- na.omit(read_excel("data/Hoyle_and_Henley_Bahl_OS_Caba.xlsm", sheet = "R data", range = cell_cols("A:F")))
# Create a list with the dataframes
l_data_survival <- list("PFS caba" = df_PFS_caba,
"PFS mito" = df_PFS_mito,
"OS caba"  = df_OS_caba,
"OS mito"  = df_OS_mito)
# Add the time of the last time point and the number of patients at risk
df_times_PFS_caba <- na.omit(read_excel("data/Hoyle_and_Henley_PFS_Caba.xlsm",     sheet = "R data", range = cell_cols("G:H")))
df_times_PFS_mito <- na.omit(read_excel("data/Hoyle_and_Henley_PFS_Mito.xlsm",     sheet = "R data", range = cell_cols("G:H")))
df_times_OS_caba  <- na.omit(read_excel("data/Hoyle_and_Henley_Bahl_OS_Caba.xlsm", sheet = "R data", range = cell_cols("G:H")))
# Create a list with the data for time points
l_times <- list("PFS caba" = df_times_PFS_caba,
"PFS mito" = df_times_PFS_mito,
"OS caba"  = df_times_OS_caba,
"OS mito"  = df_times_OS_mito)
get_survival_parameters <- function(data_survival, data_times, distributions = c("exponential", "weibull", "lognormal", "loglogistic")) {
l_results <- l_model <- l_cholesky <- list()
v_AIC <- v_intercept <- v_log_scale <- vector()
m_model_parameters <- matrix(NA, nrow = 3, ncol = length(distributions),
dimnames = list(c("AIC", "intercept", "log(scale)"),
distributions))
times_start <- c(rep(data$start_time_censor, data$n_censors), rep(data$start_time_event, data$n_events))
times_end   <- c(rep(data$end_time_censor, data$n_censors),   rep(data$end_time_event,   data$n_events))
times_start <- c(times_start, rep(data_times$n_last_time_point, data_times$n_patients_at_risk))
times_end   <- c(times_end, rep(10000, data_times$n_patients_at_risk))
for (d in distributions) {
model <- survreg(Surv(times_start, times_end, type = "interval2") ~ 1, dist = d)
n_AIC <- -2 * summary(model)$loglik[1] + 2 * ifelse(d == "exponential", 1 , 2)
n_intercept <- summary(model)$table[1]
n_log_scale <- ifelse(d != "exponential", summary(model)$table[2], NA)
m_cholesky  <- t(chol(summary(model)$var))
l_results[[d]] <- list(model     = model,
AIC       = n_AIC,
intercept = n_intercept,
log_scale = n_log_scale,
cholesky  = m_cholesky)
m_model_parameters["AIC",        which(d == distributions)] <- n_AIC
m_model_parameters["intercept",  which(d == distributions)] <- n_intercept
m_model_parameters["log(scale)", which(d == distributions)] <- n_log_scale
m_model_parameters <- round(m_model_parameters, 4)
}
l_results$summary <- m_model_parameters
return(l_results)
}
l_results_all <- list()
for (df in names(l_data_survival)) {
l_results_all[[df]] <- get_survival_parameters(data_survival = l_data_survival[[df]], data_times = l_times[[df]])
}
saveRDS(l_results_all, file = "output/l_results_all.rds")
library(openxlsx)
wb <- createWorkbook("AHEM student")
addWorksheet(wb, "PFS caba", gridLines = FALSE, tabColour = "coral")
addWorksheet(wb, "PFS mito", gridLines = FALSE, tabColour = "coral3")
addWorksheet(wb, "OS caba",  gridLines = FALSE, tabColour = "skyblue")
addWorksheet(wb, "OS mito",  gridLines = FALSE, tabColour = "skyblue4")
for (i in v_names_data) {
print(i)
print(l_results_all[[i]]$summary)
writeData(wb, sheet = i, x = l_results_all[[i]]$summary, rowNames = TRUE)
}
saveWorkbook(wb, "output/output_parametric_survival_model_parameters.xlsx", overwrite = TRUE)
#source("Estimate survival prob.R")
# Extract the results for OS Mito
l_OS_mito <- l_results_all$`OS mito`
t_weeks <- 15           # number of weeks
t <- (t_weeks/ 52) * 12 # time in months
cat(t_weeks, "weeks is the same as", round(t, 3), "months", "\n")
t_weeks <- 15           # number of weeks
t <- (t_weeks/ 52) * 12 # time in months
cat(t_weeks, "weeks is the same as", round(t, 3), "months", "\n")
# Function to calculate survival probability using the Exponential distribution
exponential_survival <- function(t, intercept) {
# t: time point in months at which the survival probability is estimated
# intercept: estimate of the intercept for the survival curve (from model fit)
# Calculate lambda (scale parameter) based on the intercept value.
# Here, lambda is the exponential of the negative of the intercept.
lambda <- exp(-intercept)  # Scale parameter for the Exponential distribution
# Calculate the survival probability at time t using the Exponential survival function.
S_t <- exp(-t * lambda)
return(S_t)   # Return the calculated survival probability at time t
}
# Calculation for exponential distribution
intercept_exp   <- l_OS_mito$exponential$intercept
p_survival_exp  <- exponential_survival(t, intercept_exp)
cat("Survival probability (Exponential) at: ", round(52/t), "weeks :", p_survival_exp, "\n")
# YOUR TURN ##
# https://www.math.arizona.edu/~rsims/ma464/standardnormaltable.pdf
# Extract the results for OS Mito
l_OS_mito <- l_results_all$`OS mito`
t_weeks <- 15           # number of weeks
t <- (t_weeks/ 52) * 12 # time in months
cat(t_weeks, "weeks is the same as", round(t, 3), "months", "\n")
### Exponential ###
# Function to calculate survival probability using the Exponential distribution
exponential_survival <- function(t, intercept) {
# t: time point in months at which the survival probability is estimated
# intercept: estimate of the intercept for the survival curve (from model fit)
# Calculate lambda (scale parameter) based on the intercept value.
# Here, lambda is the exponential of the negative of the intercept.
lambda <- exp(-intercept)  # Scale parameter for the Exponential distribution
# Calculate the survival probability at time t using the Exponential survival function.
S_t <- exp(-t * lambda)
return(S_t)   # Return the calculated survival probability at time t
}
# Calculation for exponential distribution
intercept_exp      <- l_OS_mito$exponential$intercept
p_survival_exp <- exponential_survival(t, intercept_exp)
cat("Survival probability (Exponential) at: ", round(52/t), "weeks :", p_survival_exp, "\n")
### Weibull ###
# Function to calculate survival probability using the Weibull distribution
weibull_survival <- function(t, intercept, scale) {
# t: time point at which the survival probability is estimated
# intercept: estimate of the intercept for the survival curve (from model fit)
# scale: scale parameter for the Weibull distribution, typically derived from the fitted model.
#        Note: scale = exp(logscale), where logscale is the log-transformed scale.
# Calculate the lambda (scale parameter) using the intercept and scale value.
lambda <- exp(-intercept / scale)
# Calculate the gamma (shape parameter) based on the scale.
gamma <- 1 / scale
# Calculate the survival probability at time t using the Weibull survival function.
S_t <- exp(-lambda * t ^ gamma)
return(S_t)  # Return the calculated survival probability at time t
}
intercept_weibull <- l_OS_mito$weibull$intercept
scale_weibull     <- exp(l_OS_mito$weibull$log_scale)
p_survival_weibull <- weibull_survival(t, intercept = intercept_weibull, scale = scale_weibull)
cat("Survival probability (Weibull) at time", t, "weeks :", p_survival_weibull, "\n")
# Weibull
### Lognormal ###
# Function to calculate survival probability using the Log-Normal distribution
lognormal_survival <- function(t, intercept, scale) {
# t: time point at which the survival probability is estimated
# intercept: estimate of the intercept for the log-normal curve (related to mu)
# scale: scale parameter for the log-normal curve (related to sigma)
# Calculate mu (mean) and sigma (standard deviation) for the normal distribution
mu    <- intercept  # Intercept corresponds to the mean (mu) of the underlying normal distribution
sigma <- scale   # Scale corresponds to the standard deviation (sigma)
# Calculate the survival probability at time t using the log-normal survival function
# Formula: S(t) = 1 - Phi( (ln(t) - mu) / sigma )
survival_prob <- 1 - pnorm((log(t) - mu) / sigma)
# Return the survival probability at time t
return(survival_prob)
}
mu <- intercept_lognormal<- l_OS_mito$lognormal$intercept
sigma <- scale_lognormal    <- exp(l_OS_mito$lognormal$log_scale)
p_survival_lognormal <- lognormal_survival(t, intercept = intercept_lognormal, scale = scale_lognormal)
cat("Survival probability (Lognormal) at time", t, "weeks :", p_survival_lognormal, "\n")
### Loglogistic ###
# Function to calculate survival probability using the Log-Logistic distribution
loglogistic_survival <- function(t, intercept, scale) {
# t:         time point at which the survival probability is estimated
# intercept: estimate of the intercept for the survival curve (from model fit)
# scale:     scale parameter for the Log-Logistic distribution (typically derived from the fitted model)
# Calculate lambda (scale parameter) using the intercept and scale
lambda <- exp(-intercept / scale)
# Calculate gamma (shape parameter) as the inverse of the scale
gamma <- 1 / scale
# Calculate the survival probability at time t using the Log-Logistic survival function
# The formula is: S(t) = 1 / (1 + lambda * t^gamma)
S_t <- 1 / (1 + lambda * t^gamma)
# Return the survival probability at time t
return(S_t)
}
#  for Log-Logistic distribution
intercept_loglogistic <- l_OS_mito$loglogistic$intercept
scale_loglogistic     <- exp(l_OS_mito$loglogistic$log_scale)
# Calculate survival probability at time_point using Log-Logistic distribution
p_survival_loglogistic <- loglogistic_survival(t, intercept = intercept_loglogistic, scale = scale_loglogistic)
cat("Survival probability (Loglogistic) at time", t, "weeks :", p_survival_loglogistic, "\n")
## Summary ##
# Combine and display results
v_survival_props <- round(c(p_survival_exp, p_survival_weibull, p_survival_lognormal, p_survival_loglogistic), 4)
names(v_survival_props) <- c("exponential", "weibull", "lognormal", "loglogistic")
round(v_survival_props, 3) * 100
# Ignore this code for now, used for the solutions
# source("Estimate survival prob.R")
# Extract the results for OS Mito
l_OS_mito <- l_results_all$`OS mito`
t_weeks <- 15           # number of weeks
t <- (t_weeks/ 52) * 12 # time in months
cat(t_weeks, "weeks is the same as", round(t, 3), "months", "\n")
t_weeks <- 15           # number of weeks
t <- (t_weeks/ 52) * 12 # time in months
cat(t_weeks, "weeks is the same as", round(t, 3), "months", "\n")
# Function to calculate survival probability using the Exponential distribution
exponential_survival <- function(t, intercept) {
# t: time point in months at which the survival probability is estimated
# intercept: estimate of the intercept for the survival curve (from model fit)
# Calculate lambda (scale parameter) based on the intercept value.
# Here, lambda is the exponential of the negative of the intercept.
lambda <- exp(-intercept)  # Scale parameter for the Exponential distribution
# Calculate the survival probability at time t using the Exponential survival function.
S_t <- exp(-t * lambda)
return(S_t)   # Return the calculated survival probability at time t
}
# Calculation for exponential distribution
intercept_exp   <- l_OS_mito$exponential$intercept
p_survival_exp  <- exponential_survival(t, intercept_exp)
cat("Survival probability (Exponential) at: ", round(52/t), "weeks :", p_survival_exp, "\n")
# YOUR TURN ##
intercept_exp
exp(-2.768407)
p_survival_exp <- exponential_survival(t, intercept_exp)
p_survival_exp
exp(l_OS_mito$weibull$log_scale)
1/0.6326419
l_OS_mito$weibull$log_scale
intercept_weibull
exp(l_OS_mito$weibull$log_scale)
exp(-2.778037 / 0.6326419)
p_survival_weibull <- weibull_survival(t, intercept = intercept_weibull, scale = scale_weibull)
p_survival_weibull
# Function to calculate survival probability using the Log-Normal distribution
lognormal_survival <- function(t, intercept, scale) {
# t: time point at which the survival probability is estimated
# intercept: estimate of the intercept for the log-normal curve (related to mu)
# scale: scale parameter for the log-normal curve (related to sigma)
# Calculate mu (mean) and sigma (standard deviation) for the normal distribution
mu    <- intercept  # Intercept corresponds to the mean (mu) of the underlying normal distribution
sigma <- scale   # Scale corresponds to the standard deviation (sigma)
# Calculate the survival probability at time t using the log-normal survival function
# Formula: S(t) = 1 - Phi( (ln(t) - mu) / sigma )
survival_prob <- 1 - pnorm((log(t) - mu) / sigma)
# Return the survival probability at time t
return(survival_prob)
}
mu <- intercept_lognormal<- l_OS_mito$lognormal$intercept
sigma <- scale_lognormal    <- exp(l_OS_mito$lognormal$log_scale)
mu
exp(l_OS_mito$lognormal$log_scale)
l_OS_mito$lognormal$log_scale
(log(t) - mu) / sigma
1 - 0.06552
pnorm((log(t) - mu) / sigma)
1 - 0.06573978
### Loglogistic ###
# Function to calculate survival probability using the Log-Logistic distribution
loglogistic_survival <- function(t, intercept, scale) {
# t:         time point at which the survival probability is estimated
# intercept: estimate of the intercept for the survival curve (from model fit)
# scale:     scale parameter for the Log-Logistic distribution (typically derived from the fitted model)
# Calculate lambda (scale parameter) using the intercept and scale
lambda <- exp(-intercept / scale)
# Calculate gamma (shape parameter) as the inverse of the scale
gamma <- 1 / scale
# Calculate the survival probability at time t using the Log-Logistic survival function
# The formula is: S(t) = 1 / (1 + lambda * t^gamma)
S_t <- 1 / (1 + lambda * t^gamma)
# Return the survival probability at time t
return(S_t)
}
#  for Log-Logistic distribution
intercept_loglogistic <- l_OS_mito$loglogistic$intercept
scale_loglogistic     <- exp(l_OS_mito$loglogistic$log_scale)
l_OS_mito$loglogistic$intercept
exp(l_OS_mito$loglogistic$log_scale)
1 / 0.4540846
exp(-2.202233/0.4540846)
# Calculate survival probability at time_point using Log-Logistic distribution
p_survival_loglogistic <- loglogistic_survival(t, intercept = intercept_loglogistic, scale = scale_loglogistic)
p_survival_loglogistic
# https://www.math.arizona.edu/~rsims/ma464/standardnormaltable.pdf
# Extract the results for OS Mito
l_OS_mito <- l_results_all$`OS mito`
t_weeks <- 15           # number of weeks
t <- (t_weeks/ 52) * 12 # time in months
cat(t_weeks, "weeks is the same as", round(t, 3), "months", "\n")
### Exponential ###
# Function to calculate survival probability using the Exponential distribution
exponential_survival <- function(t, intercept) {
# t: time point in months at which the survival probability is estimated
# intercept: estimate of the intercept for the survival curve (from model fit)
# Calculate lambda (scale parameter) based on the intercept value.
# Here, lambda is the exponential of the negative of the intercept.
lambda <- exp(-intercept)  # Scale parameter for the Exponential distribution
# Calculate the survival probability at time t using the Exponential survival function.
S_t <- exp(-t * lambda)
return(S_t)   # Return the calculated survival probability at time t
}
# Calculation for exponential distribution
intercept_exp <- l_OS_mito$exponential$intercept
p_survival_exp <- exponential_survival(t, intercept_exp)
cat("Survival probability (Exponential) at: ", round(52/t), "weeks :", p_survival_exp, "\n")
### Weibull ###
# Function to calculate survival probability using the Weibull distribution
weibull_survival <- function(t, intercept, scale) {
# t: time point at which the survival probability is estimated
# intercept: estimate of the intercept for the survival curve (from model fit)
# scale: scale parameter for the Weibull distribution, typically derived from the fitted model.
#        Note: scale = exp(logscale), where logscale is the log-transformed scale.
# Calculate the lambda (scale parameter) using the intercept and scale value.
lambda <- exp(-intercept / scale)
# Calculate the gamma (shape parameter) based on the scale.
gamma <- 1 / scale
# Calculate the survival probability at time t using the Weibull survival function.
S_t <- exp(-lambda * t ^ gamma)
return(S_t)  # Return the calculated survival probability at time t
}
intercept_weibull <- l_OS_mito$weibull$intercept
scale_weibull     <- exp(l_OS_mito$weibull$log_scale)
p_survival_weibull <- weibull_survival(t, intercept = intercept_weibull, scale = scale_weibull)
cat("Survival probability (Weibull) at time", t, "weeks :", p_survival_weibull, "\n")
# Weibull
### Lognormal ###
# Function to calculate survival probability using the Log-Normal distribution
lognormal_survival <- function(t, intercept, scale) {
# t: time point at which the survival probability is estimated
# intercept: estimate of the intercept for the log-normal curve (related to mu)
# scale: scale parameter for the log-normal curve (related to sigma)
# Calculate mu (mean) and sigma (standard deviation) for the normal distribution
mu    <- intercept  # Intercept corresponds to the mean (mu) of the underlying normal distribution
sigma <- scale   # Scale corresponds to the standard deviation (sigma)
# Calculate the survival probability at time t using the log-normal survival function
# Formula: S(t) = 1 - Phi( (ln(t) - mu) / sigma )
survival_prob <- 1 - pnorm((log(t) - mu) / sigma)
# Return the survival probability at time t
return(survival_prob)
}
mu <- intercept_lognormal<- l_OS_mito$lognormal$intercept
sigma <- scale_lognormal    <- exp(l_OS_mito$lognormal$log_scale)
p_survival_lognormal <- lognormal_survival(t, intercept = intercept_lognormal, scale = scale_lognormal)
cat("Survival probability (Lognormal) at time", t, "weeks :", p_survival_lognormal, "\n")
### Loglogistic ###
# Function to calculate survival probability using the Log-Logistic distribution
loglogistic_survival <- function(t, intercept, scale) {
# t:         time point at which the survival probability is estimated
# intercept: estimate of the intercept for the survival curve (from model fit)
# scale:     scale parameter for the Log-Logistic distribution (typically derived from the fitted model)
# Calculate lambda (scale parameter) using the intercept and scale
lambda <- exp(-intercept / scale)
# Calculate gamma (shape parameter) as the inverse of the scale
gamma <- 1 / scale
# Calculate the survival probability at time t using the Log-Logistic survival function
# The formula is: S(t) = 1 / (1 + lambda * t^gamma)
S_t <- 1 / (1 + lambda * t^gamma)
# Return the survival probability at time t
return(S_t)
}
#  for Log-Logistic distribution
intercept_loglogistic <- l_OS_mito$loglogistic$intercept
scale_loglogistic     <- exp(l_OS_mito$loglogistic$log_scale)
# Calculate survival probability at time_point using Log-Logistic distribution
p_survival_loglogistic <- loglogistic_survival(t, intercept = intercept_loglogistic, scale = scale_loglogistic)
cat("Survival probability (Loglogistic) at time", t, "weeks :", p_survival_loglogistic, "\n")
## Summary ##
# Combine and display results
v_survival_props <- round(c(p_survival_exp, p_survival_weibull, p_survival_lognormal, p_survival_loglogistic), 4)
names(v_survival_props) <- c("exponential", "weibull", "lognormal", "loglogistic")
round(v_survival_props, 3) * 100
#  for Log-Logistic distribution
intercept_loglogistic <- l_OS_mito$loglogistic$intercept
scale_loglogistic     <- exp(l_OS_mito$loglogistic$log_scale)
#  for Log-Logistic distribution
intercept <- intercept_loglogistic <- l_OS_mito$loglogistic$intercept
scale <- scale_loglogistic     <- exp(l_OS_mito$loglogistic$log_scale)
# Calculate lambda (scale parameter) using the intercept and scale
lambda <- exp(-intercept / scale)
lambda
# Calculate gamma (shape parameter) as the inverse of the scale
gamma <- 1 / scale
gamma
exp(l_OS_mito$loglogistic$log_scale)
# Calculate lambda (scale parameter) using the intercept and scale
lambda <- exp(-intercept / scale)
lambda
# Calculate the survival probability at time t using the Log-Logistic survival function
# The formula is: S(t) = 1 / (1 + lambda * t^gamma)
S_t <- 1 / (1 + lambda * t^gamma)
S_t
